//- module
extends /base.jade
block vars
  - var navbar = {}
  - og.title = title
  - og.url = ""
  - og.thumbnail.url = "thumbnail.png"
  - var title = name + " / datavis.tips"
  mixin markdown(content)
    p!= md(content).toString()
  - var body = {}
  - body.className = "card"
block head
block body
  body.card
    include /navbar.jade
    #root(class=lang)
      .card.panel.panel-default(style="width:800px;margin:auto")
        .preview(style="position:relative;z-index:1")
          #chart-sample
          if (bannerConfig || []).length > 1
            #choices.choices(style="position:absolute;z-index:100;top:0")
              .choice.active(data-idx="1")
              - for (var i=2;i<=(bannerConfig || []).length; i++)
                .choice(data-idx=i)
              //.choice(data-idx="3")
        div(style="position:relative;z-index:2")
          .chartico.avatar.fff(class=id)
          //-.avatar(style="background:url(/icon/chart/" + id + ".svg) #fff")
          a.btn.btn-success(href="https://plotdb.com/chart/"+plotdb,
          style="position:absolute;margin:-54px 0 0 156px",
          target="_blank") online editor &nbsp;#[i.fa.fa-external-link]
          .similar.text-right
            label= _["work best for"]
            if category
              each item in category
                .catico.sm.text(class=[item,lang].join(" "))

        .panel-body.content
          .title
            span= name
            if alias
              small  / 
              small: span= (lang!="en" ? [nameEN.toLowerCase()] : []).concat(alias).join(", ")
            else if !alias && lang != "en"
              small  / 
              small: span= (lang!="en" ? [nameEN.toLowerCase()] : []).join(", ")
            hr
          .description
            if description
              +markdown(description)
            else
              p.grayed (no description...)

          if commonPractice
            .details
              label= _["Common Practice"]
              +markdown(commonPractice)
              br

          .pros-cons
            .row
              .col-sm-6
                .icon(style="font-size:3em;color:#8bc53e"): i.fa.fa-check-circle
                label= _["Pros"]
                +markdown(pros)
              .col-sm-6
                .icon(style="font-size:3em;color:#c59c6c"): i.fa.fa-times-circle
                label= _["Cons"]
                +markdown(cons)

          .details
            if guideline
              label= _["Guideline"]
              +markdown(guideline)
              br

            if mediaUsage
              label= _["Media Usage"]
              ul
                each item in mediaUsage
                  if item == "N/A"
                    li N/A
                  else
                    li #[span= item.author], "#[a(href=item.link,target="_blank")= item.title]", #[span= (item.media ? item.media + "," : "")] #[span= item.year].
              br

            if classicExample
              .guideline
                label= _["Classic Example"]
                +markdown(classicExample)
              br
            if alternative
              .guideline
                label= _["Alternatives"]
                +markdown(alternative)
              br


          .components
            .row
              if dimension
                .col-sm-6.text-center
                  label
                    span= _["Dimensions"]
                    //-small / 
                    br
                    if dimension.filter(function(it){return it[2]=='required'}).length == dimension.length
                      small= dimension.length
                    else
                      small= dimension.filter(function(it){return it[2]=='required'}).length
                      small  ~ 
                      small= dimension.length
                    small  #{_["維"]}
                  .labels
                    each item in dimension
                      .dimico.text.md.no-border.shadow(class=[item[0].toLowerCase().replace(/ /g,"-"),lang].join(" "))
                        .taxico(class=[item[1].toLowerCase().replace(/ /g,"-"),lang].join(" "))
                  br
              if visualEncoding
                .col-sm-6.text-center
                  label
                    span= _["Visual Encodings"]
                    br
                    small= visualEncoding.length
                    small  #{_["種編碼"]}
                  .labels
                    each item in visualEncoding
                      .encico.text.md.no-border.shadow(class=[item.toLowerCase().replace(/ /g,"-"),lang].join(" "))
                  br

          if variant
            .text-center
              label= _["Variants"]
              each item in variant
                a(href=tourl(item))
                  .chartico.text.md(class=[
                  item.toLowerCase().replace(/ /g,"-"),lang,(exists(item) ? "" : "disabled")].join(" "))

    .footer
      a(href="http://plotdb.com",target="_blank")
        span POWERED BY PLOTDB
        img(src="/img/plotdb-mini-alt.png")
      .pull-left
        for lang in site.langs
          a.label.label-default(href="/" + [lang, "v", key].join("/"))= lang.toUpperCase()
          span &nbsp;
  script(type="text/javascript")= "var chartid=" + plotdb + ";"
  if bannerConfig
    script(type="text/javascript").
      var chartconfig = !{JSON.stringify(bannerConfig)};
  script.
    var curChart = null;
    plotdb.load(chartid,function(chart) {
      var root = document.getElementById("chart-sample");
      setTimeout(function() {
        if(typeof(chartconfig)!="undefined") chart.config(chartconfig[0]);
        chart.attach(root);
        curChart = chart;
      }, 1000);
    });
    document.getElementById("choices").addEventListener("click",function(it) {
      idx = +it.target.getAttribute("data-idx");
      if(!idx) return;
      Array.from(document.getElementById("choices").querySelectorAll(".choice"))
        .map(function(d) { d.className = "choice";});
      document.getElementById("choices").querySelector(".choice:nth-of-type(" + idx + ")" )
        .className = "choice active";
      curChart.config(chartconfig[idx - 1]);
      curChart.parse();
      curChart.resize();
      curChart.bind();
      curChart.render();
    });

    var start = 0;
    requestAnimationFrame(function loop(time) {
      if(curChart && time - start > 1000) {
        curChart.data(curChart._.chart.sample);
        curChart.parse();
        curChart.resize();
        curChart.bind();
        curChart.render();
        start = time;
      }
      requestAnimationFrame(loop);
    });
