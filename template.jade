doctype html
//- basic libraries: jquery(1.10.2), d3js(3.5.4), angularjs(1.3.15), bootstrap(3.0)/semantic-ui(0.9.3/0.9.5)
//-                  fontawesome(4.4.0), reactjs(0.14.0)
- var use = { cdn: false, og: false, favicon: true }
- var lib = { jquery: true, d3js: true, angular: true, bootstrap: true, semantic: false, fontawesome: true, reactjs: false, revealjs: false }
- var assets = "/assets"
- var favicon = "/thumbnail.png"
- var title = "template"
- var og = {}
- og.title = title
- og.twitter = {type: "summary_large_image", site: "@zbryikt", creator: "@zbryikt"}
- og.domain = "zbryikt.github.io"
- og.url = ""
- og.thumbnail = {width: 200, height: 200, type: "image/png"}
- og.thumbnail.url = "thumbnail.png"
- og.author = "zbryikt"
- og.section = "Taiwan"
- og.keyword = "zbryikt,template"
- og.description = ""
html(lang="en")
  head(prefix="og: http://ogp.me/ns#")
    meta(charset="utf-8")
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title= title
    // libraries
    include library.jade
    // custom files
    link(rel="stylesheet",type="text/css",href="/lib/plotdb.css")
    link(rel="stylesheet",type="text/css",href="/static/css/dev.css")
    link(rel="stylesheet",type="text/css",href="/static/css/index.css")
    link(href="https://fonts.googleapis.com/earlyaccess/notosanstc.css",rel="stylesheet")
    script(type="text/javascript",src="/lib/plotdb.js")
    script(type="text/javascript",src="/lib/plotd3.js")
  body
    #root(class=lang)
      .panel.panel-default(style="width:800px;margin:auto")
        .preview(style="position:relative;z-index:1")
          #chart-sample
          if (bannerConfig || []).length > 1
            #choices.choices(style="position:absolute;z-index:100;top:0")
              .choice.active(data-idx="1")
              - for (var i=2;i<=(bannerConfig || []).length; i++)
                .choice(data-idx=i)
              //.choice(data-idx="3")
        div(style="position:relative;z-index:2")
          .avatar(style="background:url(/icon/chart/" + id + ".svg) #fff")
          a.btn.btn-success(href="https://plotdb.com/chart/"+plotdb,
          style="position:absolute;margin:-54px 0 0 156px",
          target="_blank") online editor &nbsp;#[i.fa.fa-external-link]
          .similar.text-right
            label= _["work best for"]
            br
            if category
              each item in category
                .catico.sm.text(class=[item,lang].join(" "))

        .panel-body.content
          .title
            span= name
            small  / #[span= alias]

          if description
            p!= md(description).toString()
          else
            p.grayed (no description...)
          br

          .row
            .col-sm-6
              label= _["Pros"]
              p= pros
            .col-sm-6
              label= _["Cons"]
              p= cons
          br
          if guideline
            .row
              .col-sm-12
                label
                  span= _["Guideline"]
                ul
                  each item in guideline
                    li= item
          br
          .row
            if dimension
              .col-sm-6
                label
                  span= _["Dimensions"]
                  small / 
                  if dimension.filter(function(it){return it[1]=='required'}).length == dimension.length
                    small= dimension.length
                  else
                    small= dimension.filter(function(it){return it[1]=='required'}).length
                    small  ~ 
                    small= dimension.length

                  small  dimensions
                .labels
                  each item in dimension
                    if item[1] == "required"
                      .label.label-primary
                        span= item[0]
                        span  / 
                        span= item[2]
                    else
                      .label.label-default
                        span= item[0]
                        span  / 
                        span= item[2]
                br
            if visualEncoding
              .col-sm-6
                label= _["Visual Encodings"]
                .labels
                  each item in visualEncoding
                    .encico.text.md(class=[item.toLowerCase().replace(/ /g,"-"),lang].join(" "))
                br

          if commonPractice
            label= _["Common Practice"]
            ul
              each item in commonPractice
                li= item
            br

          if classicExample
            label= _["Classic Example"]
            ul 
              each item in classicExample
                li= item
            br

          if mediaUsage
            label= _["Media Usage"]
            ul
              each item in mediaUsage
                if item == "N/A"
                  li N/A
                else
                  li #[span= item.author], "#[a(href=item.link,target="_blank")= item.title]", #[span= item.media], #[span= item.year].
            br

          if variant
            label= _["Variants"]
            p
              each item in variant
                .chartico.text.md(class=[item.toLowerCase().replace(/ /g,"-"),lang].join(" "))
    .footer
      a(href="http://plotdb.com",target="_blank")
        span POWERED BY PLOTDB
        img(src="/img/plotdb-mini-alt.png")
  script(type="text/javascript")= "var chartid=" + plotdb + ";"
  if bannerConfig
    script(type="text/javascript").
      var chartconfig = !{JSON.stringify(bannerConfig)};
  script.
    var curChart = null;
    plotdb.load(chartid,function(chart) {
      var root = document.getElementById("chart-sample");
      setTimeout(function() {
        if(typeof(chartconfig)!="undefined") chart.config(chartconfig[0]);
        chart.attach(root);
        curChart = chart;
      }, 1000);
    });
    document.getElementById("choices").addEventListener("click",function(it) {
      idx = +it.target.getAttribute("data-idx");
      if(!idx) return;
      Array.from(document.getElementById("choices").querySelectorAll(".choice"))
        .map(function(d) { d.className = "choice";});
      document.getElementById("choices").querySelector(".choice:nth-of-type(" + idx + ")" )
        .className = "choice active";
      curChart.config(chartconfig[idx - 1]);
      curChart.parse();
      curChart.resize();
      curChart.bind();
      curChart.render();
    });
    setInterval(function() {
      curChart.data(curChart._.chart.sample);
      curChart.parse();
      curChart.resize();
      curChart.bind();
      curChart.render();
    }, 2000);
